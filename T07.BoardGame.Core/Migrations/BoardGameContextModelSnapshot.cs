// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using T07.BoardGame.Core.Data;

#nullable disable

namespace T07.BoardGame.Core.Migrations
{
    [DbContext(typeof(BoardGameContext))]
    partial class BoardGameContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.10")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "12fc2c0e-99bf-447d-9b4d-45996a250f16",
                            ConcurrencyStamp = "752a7c8c-d839-4ab8-a88a-1645f48319f8",
                            Name = "UserV0",
                            NormalizedName = "USERV0"
                        },
                        new
                        {
                            Id = "0e01b5da-60a1-426e-b306-edbecd1aa228",
                            ConcurrencyStamp = "a179e953-41dd-4ef9-adb2-37292f591890",
                            Name = "UserV1",
                            NormalizedName = "USERV1"
                        },
                        new
                        {
                            Id = "d6039682-54c4-434a-920a-d91b3888d18d",
                            ConcurrencyStamp = "966f6aff-c653-4553-bfcc-b6d63d6461d1",
                            Name = "Admin",
                            NormalizedName = "ADMIN"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "dd10f17b-6c30-43c8-b326-c69a807ba2c5",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "02c640e5-9ea2-4aae-9790-3a449e784dbb",
                            Email = "thanha1@admin.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "THANHA1@ADMIN.COM",
                            NormalizedUserName = "THANHA1@ADMIN.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAEGpZ4YQeQAwk/oMdz1S/syzHxUWBw8+BLQjKFMP0I8NrScH5hXXgspRLAEzVHlKQwA==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "2fe3573d-e5d9-4a54-8dab-cfa0031f0c42",
                            TwoFactorEnabled = false,
                            UserName = "thanha1@admin.com"
                        },
                        new
                        {
                            Id = "5c286ddc-e0fd-4a35-bada-c33ba1dc90ed",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "211cfcbc-58d7-4d2d-8e95-89e10df5d620",
                            Email = "thanhu1@user.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "THANHU1@USER.COM",
                            NormalizedUserName = "THANHU1@USER.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAEJmJdA/mku3KdyDtsaNDOUwhvW2dSUnnZ0jWe11s4+irquPvoX/3F/QIvo3JnDQk3w==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "aa7415cb-594d-4d70-85b4-4a0518e72f19",
                            TwoFactorEnabled = false,
                            UserName = "thanhu1@user.com"
                        },
                        new
                        {
                            Id = "29a1edd8-8a04-4ad4-9cc3-a0402f533017",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "174c00d1-6d7a-4cbc-ae21-5df1ce436cc6",
                            Email = "thanhu2@user.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "THANHU2@USER.COM",
                            NormalizedUserName = "THANHU2@USER.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAECaMJrK/BAG1HB00SLkhe4tFAJj5faLFv653q/0zT5dxiiHq0b03dqD7nGqvQPVH8Q==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "e3196431-f7dc-42bc-aaf4-578967667842",
                            TwoFactorEnabled = false,
                            UserName = "thanhu2@user.com"
                        },
                        new
                        {
                            Id = "7d1cb70a-6c6f-4920-b353-30f5a97e9767",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "b5a3d329-cc6a-48e7-be24-5261f50b276a",
                            Email = "thanhu3@user.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "THANHU3@USER.COM",
                            NormalizedUserName = "THANHU3@USER.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAEPsx9WSq4Jz7J6bQ4wqEPie07C05DFoXmXSUvhAr3YDEbexiFcpLocuVjdJU80Q14Q==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "bde754d8-f324-4745-9898-3a81b6cfa6d5",
                            TwoFactorEnabled = false,
                            UserName = "thanhu3@user.com"
                        },
                        new
                        {
                            Id = "e6e01470-3dcd-41b3-9eac-b11cdc461330",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "8de0133b-6b63-4312-afcd-6dcf1747b02b",
                            Email = "thanhu4@user.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "THANHU4@USER.COM",
                            NormalizedUserName = "THANHU4@USER.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAELwlMfqtpNnJ2Kt6zKuE48cZiDTtV3Rs3Ckw1BmpxjpOxrV7XMHp0kPtZfi1rm7iqQ==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "d264bb70-59f7-439f-b748-a4859fee3cce",
                            TwoFactorEnabled = false,
                            UserName = "thanhu4@user.com"
                        },
                        new
                        {
                            Id = "a2d6f7a5-7249-407c-8518-effb9df83f4d",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "9bf20483-4bdf-4aa6-8fc5-05eeb69cbde3",
                            Email = "thanhu5@user.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "THANHU5@USER.COM",
                            NormalizedUserName = "THANHU5@USER.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAEDDJW1vQ3c4I/6ELfxboPIZZRbp9GDaq9W+dVecSE6w4btx4qyDtzMSoYZU36lsX1g==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "5f2113d8-cf07-4f53-a2fd-41a3bc3f2a83",
                            TwoFactorEnabled = false,
                            UserName = "thanhu5@user.com"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderKey")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);

                    b.HasData(
                        new
                        {
                            UserId = "dd10f17b-6c30-43c8-b326-c69a807ba2c5",
                            RoleId = "d6039682-54c4-434a-920a-d91b3888d18d"
                        },
                        new
                        {
                            UserId = "5c286ddc-e0fd-4a35-bada-c33ba1dc90ed",
                            RoleId = "12fc2c0e-99bf-447d-9b4d-45996a250f16"
                        },
                        new
                        {
                            UserId = "29a1edd8-8a04-4ad4-9cc3-a0402f533017",
                            RoleId = "12fc2c0e-99bf-447d-9b4d-45996a250f16"
                        },
                        new
                        {
                            UserId = "7d1cb70a-6c6f-4920-b353-30f5a97e9767",
                            RoleId = "12fc2c0e-99bf-447d-9b4d-45996a250f16"
                        },
                        new
                        {
                            UserId = "e6e01470-3dcd-41b3-9eac-b11cdc461330",
                            RoleId = "12fc2c0e-99bf-447d-9b4d-45996a250f16"
                        },
                        new
                        {
                            UserId = "a2d6f7a5-7249-407c-8518-effb9df83f4d",
                            RoleId = "12fc2c0e-99bf-447d-9b4d-45996a250f16"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Name")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
